1. 给定两个整形变量的值，将两个值的内容进行交换。 
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main(){
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d%d", &a, &b);
	printf("a=%d b=%d\n", a, b);
	c = a;
	a = b;
	b = c;
	printf("a=%d b=%d\n", a, b);
	return 0;
}    

2. 不允许创建临时变量，交换两个数的内容（附加题）
int main(){
	int a = 0;
	int b = 0;
	scanf("%d %d", &a, &b);
	printf("a=%d b=%d\n", a, b);
	a = a^b;
	b = a^b;
	a = a^b;
	printf("a=%d b=%d\n", a, b);
	return 0;
}

3.求10 个整数中最大值。 
int main(){
	int a[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	int max = a[0];
	for (i = 0; i <10; i++)
		if (a[i] > max)
		{
			max = a[i];
		}
	printf("max=%d\n", max);
	return 0;
}
4.将三个数按从大到小输出。 
void Max(int a, int b, int c)
{
	int max ;
	if (a < b){
		max = a;
		a = b;
		b = max;
	}
	if (a < c) {
		max = a;
		a = c;
		c = max;
	}
	if (b < c) {
		max = b;
		b = c;
		c = max;
	}
	printf("%d %d %d\n", a, b, c);
}
int main()
{
	int num1 = 0; int num2=0; int num3=0;
	printf("请输入三个数");
	scanf("%d%d%d", &num1, &num2, &num3);
	Max(num1, num2, num3);
		return 0;
	}
5.求两个数的最大公约数。余数为0的时候，除数就是最大公约数 
	int main()
{
	int a=0; int b=0; int c=0;
	printf("请输入两个数:\n");
		scanf("%d %d", &a, &b);
		while(a%b!= 0)
		{
			c = a%b;
			a = b;
			b = c;
		}
		printf("最大公约数为：%d\n", b);
	return 0;
}
	
1. 将数组A中的内容和数组B中的内容进行交换。（数组一样大） 
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a[5] = { 0, 1, 2, 3, 4 };
	int b[5] = { 4, 3, 2, 1, 0 };
	int i=0 ; int j=0;
	for (i = 0; i <5; i++)
	{
		j = a[i];
		a[i] = b[i];
		b[i] = j;
	}
	for (i = 0; i <5; i++)
	{
		printf("%d", a[i]);
	}
	printf("\n");
	for (i = 0; i < 5; i++)
	{
		printf("%d", b[i]);
	}
	printf("\n");
		return 0;	
}
 2. 计算1/1-1/2+1/3-1/4+1/5 …… + 1/99 - 1/100 的值。 
 #include<stdio.h>
 int main()
{
	double sum1 = 0;
	double sum2 = 0;
	double sum = 0;
	int i = 0;
	for (i = 1; i <= 100; i = i + 2)
	{
		sum1 = sum1 + (1.0/ i);
	}
	for (i = 2; i <= 100; i = i + 2){

		sum2 = sum2 + (1.0/ i);
	}
	sum = sum1 - sum2;
	printf("%f", sum);
	return 0;
}
3. 编写程序数一下1到 100 的所有整数中出现多少个数字9。
#include<stdio.h>
int main()
{
	int num = 0; int count = 0; int a, b;
	for (num = 1; num <= 100; num++)
	{	 a = num % 10;
		 b = num / 10;
		if (a == 9)
		{
			count++;
		}
		if (b == 9)
		{
			count++;
		}
	}
	printf("count=%d\n", count);
	return 0;
}
4.1.求出0～999999之间的所有“水仙花数”并输出。 
“水仙花数”是指一个三位数，其各位数字的立方和确好等于该数本身， 
如；153＝1^3＋5^3＋3^3?，则153是一个“水仙花数”。 

1234=1^4 + 2^4 + 3^4 +4^4 

/* 
在数论中，水仙花数（Narcissistic number）也称为自恋数、自幂数、 
阿姆斯壮数或阿姆斯特朗数（Armstrong number），是指一N位数， 
其各个数之N次方和等于该数。 
例如153、370、371及407就是三位数的水仙花数，其各个数之立方和等于该数： 
153 = 1^3 + 5^3 + 3^3。 
370 = 3^3 + 7^3 + 0^3。 
371 = 3^3 + 7^3 + 1^3。 
407 = 4^3 + 0^3 + 7^3。 

1234 = 1^4+2^4+3^4+4^4 
*/ 
#include<stdio.h>
int main()
{
	int num1 = 0;
	int num2, num3, num4;
	int i;
	int a, b, c, d,f, e;
	for (num1 = 100; num1 <= 999; num1++)
	{
		a = num1 / 100;
		b = (num1 / 10) % 10;
		c = num1 % 10;
		i = a*a*a + b*b*b + c*c*c;
		if (num1 == i)
		{
			printf("%d是水仙花数\n", num1);
		}
	}
	for (num2 = 1000; num2 <= 9999; num2++)
	{
		a = num2 / 1000;
		b = (num2 / 100) % 10;
		c = (num2 / 10) % 10;
		d = num2 % 10;
		i = a*a*a*a + b*b*b*b + c*c*c*c + d*d*d*d;
		if (i == num2)
		{
			printf("%d是水仙花数\n", num2);
		}

	}
	for (num3 = 10000; num3 <= 99999; num3++)
	{
		a = num3 / 10000;
		b = (num3 / 1000) % 10;
		c = (num3 / 100) % 10;
		d = (num3 / 10) % 10;
		e = num3 % 10;
		i = a*a*a*a*a + b*b*b*b*b + c*c*c*c*c + d*d*d*d*d + e*e*e*e*e;
		if (i == num3)
		{
			printf("%d是水仙花数\n", num3);
		}
	}
	for (num4 = 100000; num4 < 999999; num4++)
	{
		a = num4 / 100000;
		b = (num4 / 10000) % 10;
		c = (num4 / 1000) % 10;
		d = (num4 / 100) % 10;
		e = (num4/10) % 10;
		f = num4 % 10;
		i = a*a*a*a*a*a + b*b*b*b*b*b + c*c*c*c*c*c + d*d*d*d*d*d + e*e*e*e*e*e+f*f*f*f*f*f;
		if (i == num4)
		{
			printf("%d是水仙花数\n", num4);
		}

	}


	return 0;
}
求Sn=a+aa+aaa+aaaa+aaaaa的前n项之和，其中a是一个数字， 
例如：2+22+222+2222+22222 
#include<stdio.h>
int main()
{
	int n = 5; int a = 2; int sum = 0; int sum1 = 0; int i = 0;
	for (i= 0; i < n; i++)
	{
		sum = sum * 10 + a;
		sum1 = sum1 + sum;
	}
	printf("sum1=%d\n", sum1);
	return 0;
}
1.实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定， 
输入9，输出9*9口诀表，输入12，输出12*12的乘法口诀表。 
int Ischeng(int n)
{
	int i = 0; int j = 0;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%d", i, j, i*j);
		}
		printf("\n");
	}
}
int main()
{
	int n;
	scanf("%d", &n);
	Ischeng(n);
	return 0;
}
2.使用函数实现两个数的交换。 
void swap1(int x, int y)
{
	int tmp = 0;
	tmp = x;
	x = y;
	y = tmp;
}
void swap2(int*px, int*py)
{
	int tmp = 0;
	tmp = *px;
	*px = *py;
	*py = tmp;
}
int main()
{
	int num1 = 1; int num2 = 2;
	swap1( num1,num2);
	printf("swap1:num1=%d num2=%d\n", num1, num2);
	swap2(&num1, &num2);
	printf("swap2:num1=%d num2=%d\n", num1, num2);
	return 0;
}
3.实现一个函数判断year是不是润年。 
int Isrnunian(int year)

{
	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
	{
		return(1);
	} 
	else
	{
		return(0);
	} 
}  
int main()
{
	int year, ret;
	scanf("%d", &year);
	ret = Isrnunian( year);
	if (ret == 1)
		printf("%d是闰年\n", year);
	else
		printf("%d不是闰年\n", year);
	return 0;
}
4. 
创建一个数组， 
实现函数init（）初始化数组、 
实现empty（）清空数组、 
实现reverse（）函数完成数组元素的逆置。 
要求：自己设计函数的参数，返回值。 
#include<stdio.h>
void init(int arr[], int len)
{
	int i = 0;
	for (i; i < len; i++)
	{
		arr[i] = i;
	}
	printf("对数组初始化\n");
}

void reverse(int arr[], int len)
{
	int start = 0;
	int end = len - 1;
	for (start; start <= len / 2; start++, end--)
	{
		arr[start] ^= arr[end];
		arr[end] ^= arr[start];
		arr[start] ^= arr[end];
	}
	printf("对数组逆置\n");
}
void empty(int arr[], int len)
{
	memset(arr, 0, sizeof(arr[0]) * len);
	printf("对数组清空\n");
}

void printArr(int arr[], int len)
{
	int i = 0;
	for (i; i < len; i++)
	{
		printf("%d", arr[i]);
	}
	printf("\n");
}
int main()
{
	int arr[15];
	int len = sizeof(arr) / sizeof(arr[0]);
	init(arr, len);
	printArr(arr, len);
	reverse(arr, len);
	printArr(arr, len);
	empty(arr, len);
	printArr(arr, len);
	return 0;
}
5.实现一个函数，判断一个数是不是素数。 
int Isprime(int num) {
	int i = 0;
	for (i = 2; i < num; ++i) {
		if (num%i == 0) {
			return 0;
			break;
		}
	}
	if (i == num) {

		return (1);
	}
}
int main() 
{
	int num, ret;
	scanf("%d", &num);
	ret = Isprime(num);
	if (ret == 1)
	{
		printf("是素数\n");
	}
	else
	{
		printf("不是素数\n");
	}
	return 0;
}
1.递归和非递归分别实现求第n个斐波那契数。
 递归：
#include<stdio.h>
int Feibo(int n)
{
	if (n == 1 || n == 2)
	{
		return 1;
	}
	return Feibo(n - 1) + Feibo(n - 2);
}
int main()
{
	int ret = Feibo(10);
		printf("%d\n", ret);
	return 0;
}
非递归：
int Feibo(int n)
{
	int i = 0; int f1 = 1;
	int f2 = 1; int f3;
	if (n == 1 || n == 2)
	{
		return 1;
	}
	for (i = 2; i < n; i++)
	{
		f3 = f1 + f2;
		f1 = f2;
		f2 = f3;
	}
	return f3;
}
int main()
{
	int ret = Feibo(10);
		printf("%d\n", ret);
	return 0;
}
2.编写一个函数实现n^k，使用递归实现 
int Cifang(int n, int k)
{
	if (k == 0)
	{
		return 0;
	}
	else if (k == 1)
	{
		return n;
	}
	else
	{
		return n*Cifang(n, k - 1);
	}

}
int main()
{
	int ret=Cifang(2, 5);
	printf("%d\n", ret);
	return 0;
}
3. 写一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和， 
例如，调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19 
int DigitSum(int num)
{
	if (num == 0)
	{
		return 0;
	}
	else
	{
		int n = num % 10;
		return(n + DigitSum(num / 10));
	}
}
int main()
{
	int ret = DigitSum(1839);
	printf("%d\n", ret);
	return 0;
}
4. 编写一个函数 reverse_string(char * string)（递归实现） 
实现：将参数字符串中的字符反向排列。 
要求：不能使用C函数库中的字符串操作函数。 
#include<string.h>
void Reverse_string(char * str)
{
	if (*(++str) != '\0')
	{
		Reverse_string(str);
	}
	printf("%c", *(str - 1));
}
int main()
{
	char a[10] = "qwerty";
	Reverse_string(a);
	printf("\n");
}
5.递归和非递归分别实现strlen 
递归：
int Strlen(const char*str)
{
	if (*str == '\0')
	{
		return 0;
	}
	else
	{
		return 1 + Strlen(str + 1);
	}
}
int main()
{
	char*p = "qwertyu";
	int len = strlen(p);
	printf("%d\n", len);
	return 0;
}
非递归 ：
int Strlen(const char*str)
{
	int count = 0;
	while (str[0] != '\0')
	{
		count++;
		str++;
	}
	return count;
}
int main()
{
	char*p = "qwertyu";
	int len = strlen(p);
	printf("%d\n", len);
	return 0;
}
6.递归和非递归分别实现求n的阶乘 
递归：int Factorial(int n)
{
	if (n <= 1)
	{
		return 1;
	}
	else
	{
		return n*Factorial(n - 1);
	}
}
int main()
{
	int ret = Factorial(8);
	printf("%d\n", ret);
}
非递归 ：
int Factorial(int n)
{
	if (n == 0)
	{
		return 1;
	}
	int i = 0; int num = 1;
	for (i = 1; i <= n; i++)
	{
		num= num*i;
	}
	return num;
}
int main()
{
	int ret = Factorial(8);
	printf("%d\n", ret);
}
7.递归方式实现打印一个整数的每一位 
递归：
void Print(int n)
{
	if (n > 9)
	{
		Print(n / 10);
	}
	printf("%d ", n % 10);
}
int main()
{
	int num = 1564;
	Print(num);
	return 0;
}
非递归 ：
void Print(int n)
{
	while (n != 0)
	{
		printf("%d ", n % 10);
		n = n / 10;
	}
}
int main()
{
	int num = 1564;
	Print(num);
	return 0;
}

1. 
写一个函数返回参数二进制中 1 的个数 
比如： 15 0000 1111 4 个 1 
程序原型： 
int count_one_bits(unsigned int value) 
{ 
 // 返回 1的位数 
} 
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int Count_one_bits(unsigned int value)
{
	int i = 0;
	int count = 0;
	while (value)
	{
		count++;
		value = value&(value - 1);
	}
	printf("二进制的个数=%d\n", count);
}
int main()
{
	Count_one_bits(23);
	return 0;
}
2.获取一个数二进制序列中所有的偶数位和奇数位， 
分别输出二进制序列。 
void OushuJishu(int num)
{
	int i = 0;
	for (int i = 31; i >=1;i=i-2)
	{
		printf("%d", (num >> i) & 1);
	}
	printf("\n");
	for(int i = 30; i >=0;i=i-2)
	{
		printf("%d", (num >> i) & 1);
	}
}
int main()
{
	OushuJishu(5);
	return 0;
}
3. 输出一个整数的每一位。 
int Zhengshu(int num)
{
	while (num > 9)
	{
		printf("%d\n", num % 10);
		num = num / 10;
	}
	return num;
}
int main()
{
	int ret=Zhengshu(123);
	printf("%d\n", ret);
	return 0;
}
4.编程实现： 
两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？ 
输入例子: 
1999 2299 
int Bijiao(int m, int n)
{
	int c = 0;
	c = m^n;
	int count = 0;
		while (c)
		{
			count++;
			c = c&(c - 1);
		}
		return count;
}
int main()
{
	int i = 0; int j = 0;
	printf("请输入两个整数");
	scanf("%d %d", &i, &j);
	int ret = 0;
	ret = Bijiao(i, j);
	printf("不同的个数为:%d", ret);
}
1. 
5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果 
A选手说：B第二，我第三； 
B选手说：我第二，E第四； 
C选手说：我第一，D第二； 
D选手说：C最后，我第三； 
E选手说：我第四，A第一； 
比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。 
#include<stdio.h>
void BiSai(int A, int B, int C, int D, int E)
{
	for (A = 1; A <= 5; ++A)
	{
		for (B = 1; B <= 5; ++B)
		{
			for (C = 1; C <= 5; ++C)
			{
				for (D = 1; D <= 5; ++D)
				{
					for (E = 1; E <= 5; ++E)
					{		
						if ((B == 2) + (A == 3) == 1 &&
							(B == 2) + (E == 4) == 1 &&
							(C == 1) + (D == 2) == 1 &&
							(C == 5) + (D == 3) == 1 &&
							(E == 4) + (A == 1) == 1)
						{
							if (A*B*C*D*E == 120)
							{
								printf("A是第%d名\n", A);
								printf("B是第%d名\n", B);
								printf("C是第%d名\n", C);
								printf("D是第%d名\n", D);
								printf("E是第%d名\n", E);
							}
						}
					}
				}
			}
		}
	}
}

int main()
{
	int A = 0;
	int B = 0;
	int C = 0;
	int D = 0;
	int E = 0;
	BiSai(A, B, C, D, E);
	return 0;
}
2. 
日本某地发生了一件谋杀案，警察通过排查确定杀人凶手必为4个。 
嫌疑犯的一个。以下为4个嫌疑犯的供词。 
A说：不是我。 
B说：是C。 
C说：是D。 
D说：C在胡说 
已知3个人说了真话，1个人说的是假话。 
现在请根据这些信息，写一个程序来确定到底谁是凶手。 
void MouSha(int a, int b, int c, int d)
{
	int i = 0; int f = 0;
	for (i = 1; i < 5; i++)
	{
		if (i == 1)
		{
			a = 1; c = 1; f = 1; d = 0;
		}
		if (i == 2)
		{
			a = 0; c = 0; f = 1; d = 0;
		}
		if (i == 3)
		{
			a = 0; c = 1; f = 0; d = 0;
		}
		if (i == 4)
		{
			a = 0; c = 1; f = 1; d = 0;
		}
		if ((a + b + c + d + f == 1) && (f == d))
		{
			printf(" A=%d\n B=%d\n C=%d\n D=%d\n", a, b, c, d);
		}
	}
}
int main()
{
	int a = 0; int b = 0; int c = 0; int d = 0; 
	MouSha(a, b, c, d);
	return 0;
}
3.在屏幕上打印杨辉三角。 
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
void YangAngle(int arr[][10], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j <= i; j++)
		{
			if (j==0 || i==j)
			{
				arr[i][j] = 1;
			}
			else
			{
				arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1];
			}
		}
	}
}
void show(int arr[][10], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j <= i; j++)
		{
			printf("  %-3d ",arr[i][j]);
		}
		printf("\n");
	}
}
int main()
{
	int arr[10][10] = { 0 };
	YangAngle(arr, 10, 10);
	show(arr, 10, 10);
	return 0;
}
1.编写函数： 
unsigned int reverse_bit(unsigned int value); 
这个函数的返回值是value的二进制位模式从左到右翻转后的值。 

如： 
在32位机器上25这个值包含下列各位： 
00000000000000000000000000011001 
翻转后：（2550136832） 
10011000000000000000000000000000 
程序结果返回： 
2550136832 
#include<math.h>
unsigned int Reverse_bit(unsigned int value)
{
	int i = 0;
	unsigned int sum = 0;
	for (i = 0; i < 32; i++)
	{
		sum+= ((value >> i) & 1)*pow(2, 31 - i);
	}
	return sum;
}
int main()
{
	int value = 25;
	unsigned int ret = Reverse_bit(value);
	printf("ret=%u\n", ret);
	return 0;
}
2.不使用（a+b）/2这种方式，求两个数的平均值。 
void ChuFa(int a, int b)
{
	int c = 0;
	c = (a + b) >> 1;
	printf("%d", c);
}
int main()
{
	int a = 0; int b = 0;
	printf("请输入两个整数：");
	scanf("%d %d", &a, &b);
	ChuFa(a, b);
	return 0;
}
3.编程实现： 
一组数据中只有一个数字出现了一次。 
其他所有数字都是成对出现的。 
请找出这个数字。（使用位运算） 
int Zhaoshuzi(char arr[], int len)
{
	int i = 0;
	for (int i = 1; i < len; i++)
	{
		arr[0] = arr[0] ^ arr[i];
	}
	printf("%d\n", arr[0]);
	return 0;
}
int main()
{
	char arr[10] = { 1, 5, 4, 9, 5, 2, 1, 6, 4, 7 };
	 int len = sizeof(arr) / sizeof(arr[0]);
	int ret= Zhaoshuzi(arr[10], len);
	printf("%d\n", ret);
	 return 0;
}
4. 
有一个字符数组的内容为:"student a am i", 
请你将数组的内容改为"i am a student". 
要求： 
不能使用库函数。 
只能开辟有限个空间（空间个数和字符串的长度无关）。 
static int my_strlen(const char *str)
{
	int count = 0;
	while (*str)
	{
		count++;
		str++;
	}
	return count;
}
static void reverse_arr(char *left, char *right)
{
	while (left < right)
	{
		char temp = *right;
		*right = *left;
		*left = temp;
		left++;
		right--;
	}
}
void reverse(char *str)
{
	assert(str != NULL);
	char *left = str;
	char *right = str + my_strlen(str) - 1;
	char *cur = str;
	reverse_arr(left, right);
	while (*cur)
	{
		char *start = cur;
		while ((*cur != ' ') && (*cur != '\0'))
		{
			cur++;
		}

		reverse_arr(start, cur - 1);
		if (*cur == ' ')
		{
			cur++;
		}
	}
}

int main()
{
	char arr[] = "student a am i";
	reverse(arr);
	printf("%s\n", arr);
	return 0;
}